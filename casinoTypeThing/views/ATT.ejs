<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Around The Table</title>
  <style>
    @font-face {
      font-family: 'Casino3DFilledMarquee';
      src: url('/casino_2/Casino3DFilledMarquee-Italic.ttf') format('truetype');
      font-style: italic;
      font-weight: normal;
      font-display: swap;
    }

    body {
      font-family: Arial, sans-serif;
      color: #333;
      background-image: url('img/floor.png');
      margin: 0;
    }

    h1 {
      text-align: center;
      margin-top: 20px;
    }

    h2 {
      text-align: center;
      margin-top: 10px;
      color: #fff;
    }

    .game {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 70vw;
      height: 50vh;
      border: 20px solid black;
      border-radius: 200px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      background-color: #025013;
      padding: 20px;
      box-shadow: 0 0 10px rgba(5, 5, 5, 0.5);
    }

    /* card-flip CSS */
    .flip-container {
      perspective: 1000px;
      width: 100%;
      height: 100%;
    }

    .flipper {
      position: relative;
      width: 100%;
      height: 100%;
      transform-style: preserve-3d;
      transition: transform 0.6s;
    }

    .flipper.flipped {
      transform: rotateY(180deg);
    }

    .back,
    .front {
      position: absolute;
      width: 100%;
      height: 100%;
      backface-visibility: hidden;
      border-radius: 8px;
    }

    .back {
      transform: rotateY(0deg);
    }

    .front {
      transform: rotateY(180deg);
    }

    #cardBoxes {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      width: 100%;
      justify-content: center;
    }

    .card-box {
      width: 80px;
      height: 120px;
      background-color: rgba(0, 0, 0, 0.2);
      border: 2px solid #fff;
      border-radius: 8px;
      overflow: hidden;
    }

    #betDiv {
      text-align: center;
      margin-bottom: 20px;
    }

    #choiceButtons button {
      margin: 5px;
      padding: 10px 20px;
    }

    #titleText {
      font-family: 'Casino3DFilledMarquee', sans-serif;
      font-size: 100px;
      text-align: center;
      color: #fff;
      text-shadow: 2px 2px 4px #d30c0c;
    }

    #cardDeckImage {
      width: 50px;
      height: 75px;
      position: relative;
      top: -5px;
      left: 0px;
      z-index: -1;
    }
  </style>
</head>

<body>
  <h1 id="titleText">Around The Table</h1>
  <h2>Welcome, <%= user %>
  </h2>

  <div class="game" id="mainDiv">
    <!-- Four flip-containers -->
    <div id="cardBoxes">
      <div class="card-box">
        <div class="flip-container">
          <div class="flipper">
            <img class="back" src="/img/cardDeckImage.png" alt="card back">
            <img class="front" src="" alt="card face">
          </div>
        </div>
      </div>
      <div class="card-box">
        <div class="flip-container">
          <div class="flipper">
            <img class="back" src="/img/cardDeckImage.png" alt="card back">
            <img class="front" src="" alt="card face">
          </div>
        </div>
      </div>
      <div class="card-box">
        <div class="flip-container">
          <div class="flipper">
            <img class="back" src="/img/cardDeckImage.png" alt="card back">
            <img class="front" src="" alt="card face">
          </div>
        </div>
      </div>
      <div class="card-box">
        <div class="flip-container">
          <div class="flipper">
            <img class="back" src="/img/cardDeckImage.png" alt="card back">
            <img class="front" src="" alt="card face">
          </div>
        </div>
      </div>
    </div>

    <!-- Bet form -->
    <div id="betDiv">
      <h2>Place Your Bet</h2>
      <input type="number" id="betInput" placeholder="Enter your bet" />
      <p id="betText"></p>
      <button id="placeBetButton">Place Bet</button>
      <p id="yourBet"></p>
    </div>

    <p id="gameText"></p>
    <div id="choiceButtons"></div>
    <button id="newRoundButton">New Round</button>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const user = '<%= user %>';
    const socket = io();
    const betDiv = document.getElementById('betDiv');
    const yourBet = document.getElementById('yourBet');
    const betInput = document.getElementById('betInput');
    const betText = document.getElementById('betText');
    const placeBetBtn = document.getElementById('placeBetButton');
    const gameText = document.getElementById('gameText');
    const choiceButtons = document.getElementById('choiceButtons');
    const newRoundBtn = document.getElementById('newRoundButton');
    const cardBoxes = Array.from(document.querySelectorAll('.card-box'));

    function resetFlips() {
      cardBoxes.forEach(box => {
        const flipper = box.querySelector('.flipper');
        flipper.classList.remove('flipped');
        box.querySelector('.front').src = '';
      });
    }

    function gameReset() {
      betDiv.style.display = 'block';
      newRoundBtn.style.display = 'none';
      gameText.textContent = 'Place your bet to start a new game.';
      choiceButtons.innerHTML = '';
      betText.textContent = '';
      yourBet.textContent = '';
      betInput.value = '';
      resetFlips();
    }
    gameReset();

    socket.on('connect', () => console.log('Connected to server'));

    placeBetBtn.addEventListener('click', () => {
      const bet = Number(betInput.value);
      if (!bet || bet <= 0) return alert('Please enter a valid bet amount.');
      socket.emit('placeBet', { user, bet });
    });

    socket.on('insufficientFunds', () => {
      alert('You do not have enough funds.');
      betInput.value = '';
    });

    socket.on('betPlaced', bet => {
      betText.textContent = 'Bet of ' + bet + ' placed.';
      yourBet.textContent = 'Your bet: ' + bet;
      betDiv.style.display = 'none';
      newRoundBtn.style.display = 'inline-block';
    });

    socket.on('newATTHand', cards => {
      gameText.textContent = 'Red or Black?';
      choiceButtons.innerHTML = `
        <button id="redBtn">Red</button>
        <button id="blackBtn">Black</button>
      `;
      document.getElementById('redBtn')
        .addEventListener('click', () => handleGuess('red', cards));
      document.getElementById('blackBtn')
        .addEventListener('click', () => handleGuess('black', cards));
    });

    newRoundBtn.addEventListener('click', () => {
      const bet = yourBet.textContent.split(': ')[1];
      socket.emit('newATTHand', { user, bet });
      newRoundBtn.style.display = 'none';
    });

    function handleGuess(color, cards) {
      choiceButtons.querySelectorAll('button').forEach(b => b.disabled = true);
      const first = cards[0];
      const box0 = cardBoxes[0];
      box0.querySelector('.front').src = first.img;
      box0.querySelector('.flipper').classList.add('flipped');
      const actual = (first.suit === 'hearts' || first.suit === 'diamonds') ? 'red' : 'black';

      if (color === actual) {
        gameText.textContent = `You guessed right! ${first.name}. Higher or Lower?`;
        choiceButtons.innerHTML = `
          <button id="higher">Higher</button>
          <button id="lower">Lower</button>
        `;
        document.getElementById('higher')
          .addEventListener('click', () => handleHLGuess('Higher', cards));
        document.getElementById('lower')
          .addEventListener('click', () => handleHLGuess('Lower', cards));
      } else {
        gameText.textContent = `Wrong! ${first.name}.`;
        setTimeout(gameReset, 2000);
      }
    }

    function handleHLGuess(guess, cards) {
      choiceButtons.querySelectorAll('button').forEach(b => b.disabled = true);
      const second = cards[1];
      const box1 = cardBoxes[1];
      box1.querySelector('.front').src = second.img;
      box1.querySelector('.flipper').classList.add('flipped');
      const actual = second.value > cards[0].value ? 'Higher' : 'Lower';

      if (guess === actual) {
        gameText.textContent = `Right! ${second.name}. Inside or Outside?`;
        choiceButtons.innerHTML = `
          <button id="inside">Inside</button>
          <button id="outside">Outside</button>
        `;
        document.getElementById('inside')
          .addEventListener('click', () => handleIOGuess('inside', cards));
        document.getElementById('outside')
          .addEventListener('click', () => handleIOGuess('outside', cards));
      } else {
        gameText.textContent = `Wrong! ${second.name}.`;
        setTimeout(gameReset, 2000);
      }
    }

    function handleIOGuess(guess, cards) {
      choiceButtons.querySelectorAll('button').forEach(b => b.disabled = true);
      const third = cards[2];
      const box2 = cardBoxes[2];
      box2.querySelector('.front').src = third.img;
      box2.querySelector('.flipper').classList.add('flipped');
      const [a, b, x] = [cards[0].value, cards[1].value, third.value];
      const inside = x > Math.min(a, b) && x < Math.max(a, b);
      const actual = inside ? 'inside' : 'outside';

      if (guess === actual) {
        gameText.textContent = `Right! ${third.name}. Suit?`;
        choiceButtons.innerHTML = `
          <button id="Diamonds">Diamonds</button>
          <button id="Hearts">Hearts</button>
          <button id="Clubs">Clubs</button>
          <button id="Spades">Spades</button>
        `;
        ['Diamonds', 'Hearts', 'Clubs', 'Spades'].forEach(s =>
          document.getElementById(s)
            .addEventListener('click', () => handleSuitGuess(s, cards))
        );
      } else {
        gameText.textContent = `Wrong! ${third.name}.`;
        setTimeout(gameReset, 2000);
      }
    }

    function handleSuitGuess(guess, cards) {
      choiceButtons.querySelectorAll('button').forEach(b => b.disabled = true);
      const fourth = cards[3];
      const box3 = cardBoxes[3];
      box3.querySelector('.front').src = fourth.img;
      box3.querySelector('.flipper').classList.add('flipped');
      const actual = fourth.suit.charAt(0).toUpperCase() + fourth.suit.slice(1);
      gameText.textContent = guess === actual
        ? `You got it! Final card was ${fourth.name}.`
        : `Nope! Final card was ${fourth.name}.`;
      setTimeout(gameReset, 2000);
    }
  </script>
</body>

</html>