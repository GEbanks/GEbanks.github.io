<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Around The Table</title>
  <link rel="stylesheet" href="/css/att.css">
  <style>
    body {
      font-family: Arial, sans-serif;
      color: #333;
      background-image: url('img/floor.png');
      margin: 0;
    }
  </style>
</head>
<!--CCCCC   LL      IIIII   EEEEE   NN  NN   TTTTT         U   U   IIIII
    CC      LL        I     EE      NNN NN     T           U   U     I
    CC      LL        I     EEEEE   NNNNNN     T           U   U     I
    CC      LL        I     EE      NN NNN     T           U   U     I
    CCCCC   LLLLL   IIIII   EEEEE   NN  NN     T           UUUUU   IIIII -->

<body>
  <button id="backButton" onclick="goBack()">Go back</button>
  <h1 id="titleText">Around The Table</h1>
  <h2>Welcome, <%= user %>
  </h2>

  <div class="game" id="mainDiv">
    <div id="cardBoxes">
      <div class="card-box">
        <div class="flip-container">
          <div class="flipper">
            <img class="back" src="/img/cardDeckImage.png" alt="card back">
            <img class="front" src="" alt="card face">
          </div>
        </div>
      </div>
      <div class="card-box">
        <div class="flip-container">
          <div class="flipper">
            <img class="back" src="/img/cardDeckImage.png" alt="card back">
            <img class="front" src="" alt="card face">
          </div>
        </div>
      </div>
      <div class="card-box">
        <div class="flip-container">
          <div class="flipper">
            <img class="back" src="/img/cardDeckImage.png" alt="card back">
            <img class="front" src="" alt="card face">
          </div>
        </div>
      </div>
      <div class="card-box">
        <div class="flip-container">
          <div class="flipper">
            <img class="back" src="/img/cardDeckImage.png" alt="card back">
            <img class="front" src="" alt="card face">
          </div>
        </div>
      </div>
    </div>


    <div id="betDiv">
      <h2>Place Your Bet</h2>
      <input type="number" id="betInput" placeholder="Enter your bet" />
      <p id="betText"></p>
      <button id="placeBetButton">Place Bet</button>
      <p id="yourBet"></p>
    </div>

    <p id="gameText"></p>
    <div id="choiceButtons"></div>
    <button id="backoutButton">Back Out</button>
    <button id="newRoundButton">New Round</button>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const multipliers = [2, 3, 5, 20];
    const user = '<%= user %>';
    const socket = io();
    const betDiv = document.getElementById('betDiv');
    const yourBet = document.getElementById('yourBet');
    const betInput = document.getElementById('betInput');
    const betText = document.getElementById('betText');
    const placeBetBtn = document.getElementById('placeBetButton');
    const gameText = document.getElementById('gameText');
    const choiceButtons = document.getElementById('choiceButtons');
    const newRoundBtn = document.getElementById('newRoundButton');
    const cardBoxes = Array.from(document.querySelectorAll('.card-box'));
    const backoutButton = document.getElementById('backoutButton');
    let currentStage = 0;  
    let winnings = 0; 

    function resetFlips() {
      cardBoxes.forEach(box => {
        const flipper = box.querySelector('.flipper');
        flipper.classList.remove('flipped');
        box.querySelector('.front').src = '';
      });
    }

    function goBack() {
      gameText.textContent = `You won ${winnings}!`;
      socket.emit('updateFunds', { user, winnings });
      setTimeout(homePage, 100);
    }

    function homePage() {
      window.location.href = '/';
    }

    function gameReset() {
      backoutButton.style.display = 'none';
      currentStage = 0;
      betDiv.style.display = 'block';
      newRoundBtn.style.display = 'none';
      gameText.textContent = 'Place your bet to start a new game.';
      choiceButtons.innerHTML = '';
      betText.textContent = '';
      yourBet.textContent = '';
      betInput.value = '';
      resetFlips();
    }
    gameReset();

    backoutButton.addEventListener('click', () => {
      if (currentStage > 0 && currentStage < 5) {
        const bet = Number(yourBet.textContent.split(': ')[1]);
        const payout = bet * multipliers[currentStage - 1];
        endRound(payout);
      }
    });

// SSSSS   OOOOO   CCCCC   K   K   EEEEE   TTTTT         SSSSS   TTTTT    U   U   FFFFF   FFFFF
// S       O   O   C       K  K    EE        T           S         T      U   U   F       F
// SSSSS   O   O   C       KKK     EEEEE     T           SSSSS     T      U   U   FFFF    FFFF
//     S   O   O   C       K  K    EE        T               S     T      U   U   F       F
// SSSSS   OOOOO   CCCCC   K   K   EEEEE     T           SSSSS     T       UUU    F       F


    socket.on('connect', () => console.log('Connected to server'));

    placeBetBtn.addEventListener('click', () => {
      const bet = Number(betInput.value);
      if (!bet || bet <= 0) return alert('Please enter a valid bet amount.');
      socket.emit('placeBet', { user, bet });
    });

    socket.on('insufficientFunds', () => {
      alert('You do not have enough funds.');
      betInput.value = '';
    });

    socket.on('betPlaced', bet => {
      betText.textContent = 'Bet of ' + bet + ' placed.';
      yourBet.textContent = 'Your bet: ' + bet;
      betDiv.style.display = 'none';
      newRoundBtn.style.display = 'inline-block';
    });

    socket.on('newATTHand', cards => {
      console.log(cards);
      gameText.textContent = 'Red or Black?';
      choiceButtons.innerHTML = `
        <button id="redBtn">Red</button>
        <button id="blackBtn">Black</button>
      `;
      document.getElementById('redBtn')
        .addEventListener('click', () => handleGuess('red', cards));
      document.getElementById('blackBtn')
        .addEventListener('click', () => handleGuess('black', cards));
    });

    newRoundBtn.addEventListener('click', () => {
      const bet = yourBet.textContent.split(': ')[1];
      socket.emit('newATTHand', { user, bet });
      newRoundBtn.style.display = 'none';
    });

// RRRR    BBBB      GGGGG   U   U   EEEEE   SSSSS   SSSSS
// RR  R   BB  B     G       U   U   EE      S       S
// RRRR    BBBB      G  GGG  U   U   EEEEE   SSSSS   SSSSS
// RR R    BB  B     G    G  U   U   EE          S        S
// RR  R   BBBB      GGGGG    UUU    EEEEE   SSSSS   SSSSS


    function handleGuess(color, cards) {
      currentStage = 1;
      document.getElementById('backoutButton').style.display = 'inline-block';
      choiceButtons.querySelectorAll('button').forEach(b => b.disabled = true);
      const first = cards[0];
      const box0 = cardBoxes[0];
      box0.querySelector('.front').src = first.img;
      box0.querySelector('.flipper').classList.add('flipped');
      const actual = (first.suit === 'hearts' || first.suit === 'diamonds') ? 'red' : 'black';

      if (color === actual) {
        gameText.textContent = `You guessed right! ${first.name}. Higher or Lower?`;
        choiceButtons.innerHTML = 
          `<button id="higher">Higher</button>
          <button id="lower">Lower</button>`
        winnings = Number(yourBet.textContent.split(': ')[1]) * 2;
        ;
        document.getElementById('higher')
          .addEventListener('click', () => handleHLGuess('Higher', cards));
        document.getElementById('lower')
          .addEventListener('click', () => handleHLGuess('Lower', cards));
      } else {
        backoutButton.style.display = 'none';
        gameText.textContent = `Wrong! ${first.name}.`;
        setTimeout(gameReset, 2000);
      }
    }

// H   H   L        GGGGG   U   U   EEEEE   SSSSS   SSSSS
// H   H   L        G       U   U   EE      S       S
// HHHHH   L        G  GGG  U   U   EEEEE   SSSSS   SSSSS
// H   H   L        G    G  U   U   EE          S        S
// H   H   LLLLL    GGGGG    UUU    EEEEE   SSSSS   SSSSS


    function handleHLGuess(guess, cards) {
      currentStage = 2;
      backoutButton.style.display = 'inline-block';
      choiceButtons.querySelectorAll('button').forEach(b => b.disabled = true);
      const second = cards[1];
      const box1 = cardBoxes[1];
      box1.querySelector('.front').src = second.img;
      box1.querySelector('.flipper').classList.add('flipped');
      const actual = second.value > cards[0].value ? 'Higher' : 'Lower';

      if (guess === actual) {
        gameText.textContent = `Right! ${second.name}. Inside or Outside?`;
        choiceButtons.innerHTML = `
          <button id="inside">Inside</button>
          <button id="outside">Outside</button>
        `;
        winnings = Number(yourBet.textContent.split(': ')[1]) * 3;
        document.getElementById('inside')
          .addEventListener('click', () => handleIOGuess('inside', cards));
        document.getElementById('outside')
          .addEventListener('click', () => handleIOGuess('outside', cards));
      } else {
        backoutButton.style.display = 'none';
        gameText.textContent = `Wrong! ${second.name}.`;
        setTimeout(gameReset, 2000);
      }
    }

// IIIII   OOOOO      GGGGG  U   U   EEEEE   SSSSS   SSSSS
//   I     O   O     G       U   U   EE      S       S
//   I     O   O     G  GGG  U   U   EEEEE   SSSSS   SSSSS
//   I     O   O     G    G  U   U   EE          S        S
// IIIII   OOOOO      GGGGG   UUU    EEEEE   SSSSS   SSSSS


    function handleIOGuess(guess, cards) {
      currentStage = 3;
      backoutButton.style.display = 'inline-block';
      choiceButtons.querySelectorAll('button').forEach(b => b.disabled = true);
      const third = cards[2];
      const box2 = cardBoxes[2];
      box2.querySelector('.front').src = third.img;
      box2.querySelector('.flipper').classList.add('flipped');
      const [a, b, x] = [cards[0].value, cards[1].value, third.value];
      const inside = x >= Math.min(a, b) && x <= Math.max(a, b);
      const actual = inside ? 'inside' : 'outside';

      if (guess === actual) {
        gameText.textContent = `Right! ${third.name}. Suit?`;
        choiceButtons.innerHTML = `
          <button id="Diamonds">Diamonds</button>
          <button id="Hearts">Hearts</button>
          <button id="Clubs">Clubs</button>
          <button id="Spades">Spades</button>
        `;
        winnings = Number(yourBet.textContent.split(': ')[1]) * 5;
        ['Diamonds', 'Hearts', 'Clubs', 'Spades'].forEach(s =>
          document.getElementById(s)
            .addEventListener('click', () => handleSuitGuess(s, cards))
        );
      } else {
        backoutButton.style.display = 'none';
        gameText.textContent = `Wrong! ${third.name}.`;
        setTimeout(gameReset, 2000);
      }
    }

// SSSSS   U   U   IIIII   TTTTT        GGGGG   U   U   EEEEE   SSSSS   SSSSS
// S       U   U     I       T          G       U   U   EE      S       S
// SSSSS   U   U     I       T          G  GGG  U   U   EEEEE   SSSSS   SSSSS
//     S   U   U     I       T          G    G  U   U   EE          S        S
// SSSSS    UUU    IIIII     T           GGGGG   UUU    EEEEE   SSSSS   SSSSS


    function handleSuitGuess(guess, cards) {
      currentStage = 4;
      backoutButton.style.display = 'inline-block';
      choiceButtons.querySelectorAll('button').forEach(b => b.disabled = true);
      const fourth = cards[3];
      const box3 = cardBoxes[3];
      box3.querySelector('.front').src = fourth.img;
      box3.querySelector('.flipper').classList.add('flipped');
      const actual = fourth.suit.charAt(0).toUpperCase() + fourth.suit.slice(1);
      if (guess === actual) {
        `You got it! Final card was ${fourth.name}.`
        winnings = Number(yourBet.textContent.split(': ')[1]) * multipliers[3];
        endRound(winnings);
        setTimeout(gameReset, 5000);
      } else {
        backoutButton.style.display = 'none';
        gameText.textContent = `Wrong! ${fourth.name}.`;
        setTimeout(gameReset, 2000);
      }
    }

// EEEEE   NN  NN   DDDDD      RRRR     OOOOO   U   U   NN  NN   DDDDD
// EE      NNN NN   DD  DD     RR  RR  OO   OO  U   U   NNN NN   DD  DD
// EEEEE   NNNNNN   DD   DD    RRRR    OO   OO  U   U   NNNNNN   DD   DD
// EE      NN NNN   DD  DD     RR  RR  OO   OO  U   U   NN NNN   DD  DD
// EEEEE   NN  NN   DDDDD      RR   RR  OOOOO   UUUUU   NN  NN   DDDDD


    function endRound(payout) {
      backoutButton.style.display = 'none';
      gameText.textContent = `You won ${winnings}!`;
      socket.emit('updateFunds', { user, payout });
      setTimeout(gameReset, 2000);
    }
    </script>
</body>

</html>